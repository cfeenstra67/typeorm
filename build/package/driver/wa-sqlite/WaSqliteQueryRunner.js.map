{"version":3,"sources":["../../src/driver/wa-sqlite/WaSqliteQueryRunner.ts"],"names":[],"mappings":"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","file":"WaSqliteQueryRunner.js","sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { WaSqliteDriver } from \"./WaSqliteDriver\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class WaSqliteQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: WaSqliteDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: WaSqliteDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n\n        const isAnotherTransactionActive = this.isTransactionActive\n        if (!isAnotherTransactionActive) await this.startTransaction()\n        try {\n            const selectViewDropsQuery = `SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'`\n            const dropViewQueries: ObjectLiteral[] = await this.query(\n                selectViewDropsQuery,\n            )\n            for (const q of dropViewQueries) {\n                await this.query(q[\"query\"])\n            }\n\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`\n            const dropTableQueries: ObjectLiteral[] = await this.query(\n                selectTableDropsQuery,\n            )\n            for (const q of dropTableQueries) {\n                await this.query(q[\"query\"])\n            }\n\n            if (!isAnotherTransactionActive) await this.commitTransaction()\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw error\n        } finally {\n            await this.query(`PRAGMA foreign_keys = ON`)\n        }\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters: any[] = [],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const databaseConnection = this.driver.databaseConnection\n        const sqlite3 = await this.driver.sqlite3Promise\n        const SQLite = this.driver.SQLite;\n        if (SQLite === undefined) {\n            throw new DriverPackageNotInstalledError('wa-sqlite', 'wa-sqlite');\n        }\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        const queryStartTime = +new Date()\n        let statement: any\n\n        try {\n            const isInsert = query.startsWith('INSERT ')\n\n            const queryStr = sqlite3.str_value(sqlite3.str_new(databaseConnection, query));\n            statement = (await sqlite3.prepare_v2(\n                databaseConnection,\n                queryStr,\n            ))?.stmt\n            if (parameters) {\n                parameters = parameters.map((p) =>\n                    typeof p !== \"undefined\" ? p : null,\n                )\n\n                sqlite3.bind_collection(statement, parameters)\n            }\n\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime =\n                this.driver.options.maxQueryExecutionTime\n            const queryEndTime = +new Date()\n            const queryExecutionTime = queryEndTime - queryStartTime\n            if (\n                maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime\n            )\n                this.driver.connection.logger.logQuerySlow(\n                    queryExecutionTime,\n                    query,\n                    parameters,\n                    this,\n                )\n\n            const records: any[] = []\n\n            const columnNames = sqlite3.column_names(statement);\n\n            while (await sqlite3.step(statement) === SQLite.SQLITE_ROW) {\n                const obj: any = {};\n                const row = sqlite3.row(statement)\n                for (let i = 0; i < columnNames.length; i++) {\n                    obj[columnNames[i]] = row[i]\n                }\n                records.push(obj)\n            }\n\n            const changes = sqlite3.changes(databaseConnection)\n\n            await sqlite3.finalize(statement)\n            statement = undefined\n\n            if (isInsert) {\n                await sqlite3.exec(databaseConnection, `SELECT last_insert_rowid()`, (row, columns) => {\n                    records.push(row[0])\n                });\n            }\n\n            const result = new QueryResult()\n\n            result.affected = changes;\n            result.records = records\n            result.raw = records\n\n            if (useStructuredResult) {\n                return result\n            } else {\n                return result.raw\n            }\n        } catch (e) {\n            if (statement) {\n                await sqlite3.finalize(statement)\n            }\n\n            this.driver.connection.logger.logQueryError(\n                e,\n                query,\n                parameters,\n                this,\n            )\n            throw new QueryFailedError(query, parameters, e)\n        }\n    }\n}\n"],"sourceRoot":"../.."}