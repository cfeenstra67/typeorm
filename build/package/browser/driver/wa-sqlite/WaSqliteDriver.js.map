{"version":3,"sources":["../browser/src/driver/wa-sqlite/WaSqliteDriver.ts"],"names":[],"mappings":"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","file":"WaSqliteDriver.js","sourcesContent":["import type * as SQLite from 'wa-sqlite';\n\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { WaSqliteConnectionOptions } from \"./WaSqliteConnectionOptions\"\nimport { WaSqliteModule, WaSqliteAsyncModule } from \"./WaSqliteModule\"\nimport { WaSqliteQueryRunner } from \"./WaSqliteQueryRunner\"\n\nexport class WaSqliteDriver extends AbstractSqliteDriver {\n    // The driver specific options.\n    options: WaSqliteConnectionOptions\n\n\n    SQLite: typeof SQLite | undefined;\n\n    private readyPromise: Promise<void>\n    sqlite3Promise: Promise<SQLiteAPI>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.readyPromise = Promise.resolve()\n        this.sqlite3Promise = Promise.reject(new Error('dependencies not loaded'))\n        // load sqlite module\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        await this.readyPromise\n        this.databaseConnection = await this.createDatabaseConnection()\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n        const sqlite3 = await this.sqlite3Promise\n        await sqlite3.close(this.databaseConnection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new WaSqliteQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\"\n        }\n\n        return super.normalizeType(column)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     * If the location option is set, the database is loaded first.\n     */\n    protected async createDatabaseConnection(): Promise<any> {\n        const sqlite3 = await this.sqlite3Promise\n        this.databaseConnection = await sqlite3.open_v2(\n            this.options.database,\n            this.options.flags,\n            this.options.vfs,\n        );\n        await sqlite3.exec(this.databaseConnection, `PRAGMA foreign_keys = ON`)\n        return this.databaseConnection;\n    }\n\n    /**\n     * Load wa-sqlite package\n     */\n    protected loadDependencies(): void {\n        const SQLite = require('wa-sqlite')\n        this.SQLite = SQLite\n        if (this.SQLite === undefined) {\n            throw new DriverPackageNotInstalledError('wa-sqlite', 'wa-sqlite');\n        }\n        // Avoid this being raised as an unhandled rejection later\n        this.sqlite3Promise.catch(() => {})\n        if (this.options.driver !== undefined) {\n            this.sqlite3Promise = Promise.resolve(this.options.driver);\n        } else {\n            let mod = this.options.module;\n            if (mod === undefined) {\n                const factory = this.options.async ? WaSqliteAsyncModule : WaSqliteModule\n                const { module: newMod, ready } = factory()\n                mod = newMod\n                this.readyPromise = ready\n            }\n\n            this.sqlite3Promise = this.readyPromise.then(() => SQLite.Factory(mod))\n        }\n    }\n}\n"],"sourceRoot":"../.."}